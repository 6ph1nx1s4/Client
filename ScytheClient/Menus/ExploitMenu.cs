using ApolloCore.API.QM;
using MelonLoader;
using ScytheStation.API.Utils;
using ScytheStation.Components.Extensions;
using System;
//using ScytheStation.Components;
using System.Collections;
using UnityEngine;
using VRC.SDKBase;
using Player = VRC.Player;
//using UnityEngine;

namespace ScytheStation.Menus
{
    internal class ExploitMenu
    {
        private static IEnumerator E1 = null;
        internal static void Init(QMTabMenu menu)
        {
            var AnotherMenu7 = new QMNestedButton(menu, 2, 1, "Exploits", "Time to hak", "Exploits");
            new QMToggleButton(AnotherMenu7, 1, 0, "E1 in this hoe", delegate
            {
                if (Functions.Exploits.Earrape == false)
                {
                    Functions.Exploits.Earrape = true;
                    E1 = Functions.Exploits.Event1Earrape();
                    MelonCoroutines.Start(E1);
                }
                MelonLogger.Msg("[EXPLOITS] Dont get banned"); Notificator.WriteHudMessage($"[EXPLOITS] Dont get banned");
            }, delegate
            {
                MelonLogger.Msg("[EXPLOITS] Good boy"); Notificator.WriteHudMessage($"[EXPLOITS] Good boy");
                if (Functions.Exploits.Earrape == true)
                {
                    Functions.Exploits.Earrape = false;
                    if (E1 != null)
                    {
                        MelonCoroutines.Stop(E1);
                    }
                }
            }, "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!");
            new QMToggleButton(AnotherMenu7, 2, 0, "Pickup Force", delegate
            { Functions.Exploits.PickupForce = true; new WaitForSeconds(20f); Functions.Exploits.ForcePickup(); }, delegate
            { Functions.Exploits.PickupForce = false; new WaitForSeconds(1f); Functions.Exploits.ForcePickup(); }, "yoink thx");
            MelonLogger.Msg(ConsoleColor.Green, "[MENUS] ExploitMenu Loaded", MenuManager.C++);
        }
    }
    internal class TargetExploitMenu
    {
        public static void Init(QMNestedButton Usermenu)
        {
            var AnotherMenu8 = new QMNestedButton(Usermenu, 2, 0, "Target Exploits", "Time to hak", "Target Exploits");

            new QMToggleButton(AnotherMenu8, 1, 0, "item Orbit", delegate
            { Functions.Exploits.ItemOrbitToggle = true; Functions.Exploits.Recache(); }, delegate
            { Functions.Exploits.ItemOrbitToggle = false; Functions.Exploits.Recache(); }, "woosh woosh woosh");
            new QMSingleButton(AnotherMenu8, 2, 0, "Teleport Pickups", () =>
            {
                foreach (VRC_Pickup VRCPickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.SetOwner(Networking.LocalPlayer, VRCPickup.gameObject);
                    VRCPickup.transform.position = IUserExtension.SelectedVRCPlayer().transform.position;
                }
            }, "Exery pickup u can have lol", true);
            new QMSingleButton(AnotherMenu8, 3, 0, "Teleport", () =>
            {
                VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0.TeleportTo(IUserExtension.SelectedVRCPlayer().transform.position, IUserExtension.SelectedVRCPlayer().transform.rotation);
            }, "cmere og version", true);
            new QMSingleButton(AnotherMenu8, 4, 0, "Respawn pickups", () =>
            {
                foreach (VRC_Pickup VRCPickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(VRCPickup.gameObject);
                    VRCPickup.transform.position = new Vector3(0, -9999, 0);
                }
            }, "", true);
            MelonLogger.Msg(ConsoleColor.Green, "[MENUS] ExploitMenuSelectManagerExtention Loaded", MenuManager.S++);
        }
    }
}
