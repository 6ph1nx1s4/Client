using VRC;
using MelonLoader;
//using VRC.SDKBase;
//using ScytheStation.Components.Extensions;
//using ScytheStation.Components;
//using ExitGames.Client.Photon;
//using UnityEngine;
//using BitConverter = System.BitConverter;
//using System.Collections;
//using Photon.Realtime;
//using System;

namespace ScytheStation.Functions
{
    internal class Exploits
    {
        public static void AllowCloning()
        {
            try
            {
                foreach (var player in PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0)
                {
                    if (player.prop_APIUser_0.allowAvatarCopying.Equals(false))
                    {
                        player.prop_APIUser_0.allowAvatarCopying.Equals(true);
                    }
                }
            }
            catch { MelonLogger.Error("Failed to Enable Cloning Automatically"); }
        }
        //public static IEnumerator EarrapeExploit()
        //{
        //    try
        //    {
        //        while (MainSettings.E1)
        //        {
        //            byte[] Send = Il2CppSystem.Convert.FromBase64String("AAAAAAAAAAC7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7Dhiy5tkRecs21ljjofvebe6xsYlA4cVmght0=");
        //            Buffer.BlockCopy(BitConverter.GetBytes(VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_VRCPlayerApi_0.playerId), 0, Send, 0, 4);
        //            Buffer.BlockCopy(BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds()), 0, Send, 4, 4);
        //            for (int i = 0; i < 25; i++)
        //            {
        //                PhotonExtensions.OpRaiseEvent(1, Send, new RaiseEventOptions { field_Public_EventCaching_0 = EventCaching.DoNotCache, field_Public_ReceiverGroup_0 = ReceiverGroup.Others }, new SendOptions() { DeliveryMode = DeliveryMode.UnreliableUnsequenced, Reliability = false, Encrypt = false, Channel = 1 });
        //            } new WaitForSeconds(0.25f);
        //        }
        //        yield break;
        //    }
        //    catch (Exception ex) { MelonLogger.Error($"\n---------------------------------------------------\n[EXPLOITS | E1] Failed to start:\n{ex}\n---------------------------------------------------"); }
        //}
    }
}
