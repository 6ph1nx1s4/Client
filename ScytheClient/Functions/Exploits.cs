using VRC.SDKBase;
using ScytheStation.Components.Extensions;
using ExitGames.Client.Photon;
using UnityEngine;
using System.Collections;
using VRC;
using Photon.Realtime;
using System;

namespace ScytheStation.Functions
{
    internal class Exploits
    {
        public static bool Earrape = false;
        public static bool PickupForce = false;
        public static VRC_Pickup[] cached;
        public static bool ItemOrbitToggle = false;
        public static int ItemOrbitSpeed = 1;
        public static int ItemOrbitSize = 2;
        public static int ItemOrbitUpDown = 1;
        internal static IEnumerator Event1Earrape() // pc pricible
        {
            while (Earrape)
            {
                byte[] VoiceData = Convert.FromBase64String("AAAAAAAAAAC7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7Dhiy5tkRecs21ljjofvebe6xsYlA4cVmght0=");

                // Old:     // "AAAAAAAAAAC7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7Dhiy5tkRecs21ljjofvebe6xsYlA4cVmght0="
                // Example: // "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||" that long
                Buffer.BlockCopy(BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds()), 0, VoiceData, 4, 4);
                for (int i = 0; i < 25; i++)
                {
                    PhotonExtensions.OpRaiseEvent(1, VoiceData, new RaiseEventOptions
                    {
                        field_Public_EventCaching_0 = EventCaching.DoNotCache,
                        field_Public_ReceiverGroup_0 = ReceiverGroup.Others
                    }, new SendOptions()
                    {
                        DeliveryMode = DeliveryMode.UnreliableUnsequenced,
                        Reliability = false,
                        Encrypt = false,
                        Channel = 1
                    });
                }
                yield return new WaitForSeconds(0.25f);
            }
            yield break;
        }
        public static void ForcePickup()
        {
            if (PickupForce)
            {
                foreach (VRC_Pickup VRCPickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    if (VRCPickup.DisallowTheft == true)
                    {
                        VRCPickup.DisallowTheft = false;
                        VRCPickup.pickupable = true;
                    }
                    if (VRCPickup.proximity != float.MaxValue)
                    {
                        VRCPickup.proximity = float.MaxValue;
                    }
                }
            }
            else
            {
                foreach (VRC_Pickup VRCPickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    if (VRCPickup.DisallowTheft == false)
                    {
                        VRCPickup.DisallowTheft = true;
                    }
                    if (VRCPickup.proximity != float.MaxValue)
                    {
                        VRCPickup.proximity = float.MaxValue;
                    }
                }
            }
        }
        public static void ItemOrbit(VRC.Player player)
        {
            if (!ItemOrbitToggle || VRCPlayer.field_Internal_Static_VRCPlayer_0 == null || player == null)
            {
                return;
            }
            if (cached == null)
            {
                Recache();
            }
            GameObject gameObject = new GameObject();
            Transform transform = gameObject.transform;
            transform.position = ((player != null) ? player.transform.position : VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position) + new Vector3(0f, (float)ItemOrbitUpDown, 0f);
            gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time * (float)ItemOrbitSpeed, 0f));
            for (int i = 0; i < cached.Length; i++)
            {
                VRC_Pickup vrc_Pickup = cached[i];
                if (Networking.GetOwner(vrc_Pickup.gameObject) != Networking.LocalPlayer)
                {
                    Networking.SetOwner(Networking.LocalPlayer, vrc_Pickup.gameObject);
                }
                vrc_Pickup.transform.position = gameObject.transform.position + gameObject.transform.forward * (float)ItemOrbitSize;
                gameObject.transform.Rotate(new Vector3(0f, (float)(360 / cached.Length), 0f));
            }
            UnityEngine.Object.Destroy(gameObject);
        }
        public static void Recache()
        {
            cached = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>();
        }
    }
}
